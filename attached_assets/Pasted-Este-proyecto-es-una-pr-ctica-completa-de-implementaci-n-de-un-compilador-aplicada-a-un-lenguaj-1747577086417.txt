Este proyecto es una pr√°ctica completa de **implementaci√≥n de un compilador**, aplicada a un lenguaje propio o una versi√≥n simplificada de HTML/XML. A continuaci√≥n te explico paso a paso qu√© significa cada parte, qu√© debes hacer y c√≥mo puedes resolverlo.

---

## üß† ¬øQu√© es lo que se te pide?

Crear un **compilador** que haga lo siguiente:

1. **Reciba como entrada** un c√≥digo fuente en un lenguaje definido por ti (puede ser un mini-HTML, XML, o uno inventado por ti).
2. **Analice la estructura y la sintaxis** de ese c√≥digo (validar que est√© bien escrito).
3. **Genere un AST (√Årbol de Sintaxis Abstracta)** del c√≥digo de entrada.
4. **Transforme ese AST** en otro formato, como:

   * HTML (si inventaste tu propio lenguaje),
   * tu propio lenguaje (si tomaste HTML/XML como entrada),
   * un **formato intermedio** (tipo tokens o pseudoc√≥digo),
   * o incluso un **formato de salida como PDF o JSON**.
5. **Implemente un validador de sintaxis** (parser).
6. **Genere c√≥digo intermedio** que luego servir√≠a como entrada para otras fases del compilador (como optimizaci√≥n o generaci√≥n de c√≥digo final).

---

## ‚úÖ Requisitos del proyecto

### 1. **Dise√±o del Lenguaje**

* Define tu lenguaje: puede ser uno nuevo (ej. ‚ÄúMyMarkup‚Äù) o una versi√≥n limitada de HTML/XML.
* Ejemplo de tu lenguaje propio:

```txt
[Titulo] Mi P√°gina Web [/Titulo]
[Parrafo] Bienvenido a mi p√°gina [/Parrafo]
```

### 2. **An√°lisis l√©xico (tokenizaci√≥n)**

* Crear un lexer que divida el c√≥digo en **tokens**:

  * Ej: `[Titulo]` ‚Üí Token: `ETIQUETA_APERTURA_TITULO`
  * `"Mi P√°gina Web"` ‚Üí Token: `CONTENIDO`

### 3. **An√°lisis sint√°ctico (parser)**

* Validar que las etiquetas abren y cierran correctamente.
* Crear un **√Årbol de Sintaxis Abstracta (AST)**.

### 4. **An√°lisis sem√°ntico (opcional si el lenguaje lo requiere)**

* Verificar reglas sem√°nticas (por ejemplo, que no haya una etiqueta `[Imagen]` sin `src`).

### 5. **Generador de c√≥digo intermedio**

* Transforma el AST en una representaci√≥n intermedia.
* Ejemplo:

```json
{
  "tag": "Titulo",
  "value": "Mi P√°gina Web"
}
```

### 6. **Generador de c√≥digo final (HTML u otro formato)**

* Convertir el c√≥digo intermedio en HTML, PDF o JSON.

---

## üõ†Ô∏è ¬øC√≥mo resolverlo? (Pasos sugeridos)

### 1. Escoge el lenguaje de entrada

* Puede ser:

  * Un subconjunto de HTML
  * Un nuevo lenguaje inventado (tipo mini-markup)
  * Algo visual como etiquetas `[Caja]` `[Texto]`

### 2. Elige el lenguaje de programaci√≥n

* Python (usando librer√≠as como `ply`, `lark`, `regex`, etc.)
* JavaScript (si haces interfaz web)
* Java (m√°s formal)

### 3. Escribe el analizador l√©xico

* Usa expresiones regulares para identificar tokens
* Ejemplo en Python:

```python
import re
tokens = re.findall(r"\[.*?\]|\w+", "[Titulo] Mi P√°gina Web [/Titulo]")
```

### 4. Escribe el analizador sint√°ctico (parser)

* Convierte los tokens en un √°rbol (estructura jer√°rquica).
* Puedes usar `lark` en Python para esto f√°cilmente.

### 5. Genera el AST

* Ejemplo de √°rbol:

```python
{
  "type": "Pagina",
  "children": [
    {"type": "Titulo", "value": "Mi P√°gina Web"},
    {"type": "Parrafo", "value": "Bienvenido"}
  ]
}
```

### 6. Genera el formato de salida

* Por ejemplo, HTML:

```html
<h1>Mi P√°gina Web</h1>
<p>Bienvenido</p>
```

---

## üéØ Ejemplo completo

### C√≥digo de entrada (lenguaje inventado):

```txt
[Titulo] Hola Mundo [/Titulo]
[Parrafo] Este es un p√°rrafo. [/Parrafo]
```

### Salida HTML generada:

```html
<h1>Hola Mundo</h1>
<p>Este es un p√°rrafo.</p>
```

---

¬øQuieres que te ayude a elegir el lenguaje que vas a inventar o deseas trabajar sobre HTML?
